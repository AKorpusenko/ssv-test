// Code generated by MockGen. DO NOT EDIT.
// Source: ./timer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	qbft "github.com/bloxapp/ssv-spec/qbft"
	types "github.com/bloxapp/ssv-spec/types"
	gomock "github.com/golang/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// GetChannel mocks base method.
func (m *MockTimer) GetChannel() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockTimerMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockTimer)(nil).GetChannel))
}

// GetRole mocks base method.
func (m *MockTimer) GetRole() types.BeaconRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole")
	ret0, _ := ret[0].(types.BeaconRole)
	return ret0
}

// GetRole indicates an expected call of GetRole.
func (mr *MockTimerMockRecorder) GetRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockTimer)(nil).GetRole))
}

// Round mocks base method.
func (m *MockTimer) Round() qbft.Round {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Round")
	ret0, _ := ret[0].(qbft.Round)
	return ret0
}

// Round indicates an expected call of Round.
func (mr *MockTimerMockRecorder) Round() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Round", reflect.TypeOf((*MockTimer)(nil).Round))
}

// TimeoutForRound mocks base method.
func (m *MockTimer) TimeoutForRound(height qbft.Height, round qbft.Round) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutForRound", height, round)
}

// TimeoutForRound indicates an expected call of TimeoutForRound.
func (mr *MockTimerMockRecorder) TimeoutForRound(height, round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutForRound", reflect.TypeOf((*MockTimer)(nil).TimeoutForRound), height, round)
}

// MockBeaconNetwork is a mock of BeaconNetwork interface.
type MockBeaconNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconNetworkMockRecorder
}

// MockBeaconNetworkMockRecorder is the mock recorder for MockBeaconNetwork.
type MockBeaconNetworkMockRecorder struct {
	mock *MockBeaconNetwork
}

// NewMockBeaconNetwork creates a new mock instance.
func NewMockBeaconNetwork(ctrl *gomock.Controller) *MockBeaconNetwork {
	mock := &MockBeaconNetwork{ctrl: ctrl}
	mock.recorder = &MockBeaconNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconNetwork) EXPECT() *MockBeaconNetworkMockRecorder {
	return m.recorder
}

// GetSlotStartTime mocks base method.
func (m *MockBeaconNetwork) GetSlotStartTime(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotStartTime", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetSlotStartTime indicates an expected call of GetSlotStartTime.
func (mr *MockBeaconNetworkMockRecorder) GetSlotStartTime(slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotStartTime", reflect.TypeOf((*MockBeaconNetwork)(nil).GetSlotStartTime), slot)
}

// SlotDurationSec mocks base method.
func (m *MockBeaconNetwork) SlotDurationSec() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotDurationSec")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SlotDurationSec indicates an expected call of SlotDurationSec.
func (mr *MockBeaconNetworkMockRecorder) SlotDurationSec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotDurationSec", reflect.TypeOf((*MockBeaconNetwork)(nil).SlotDurationSec))
}
